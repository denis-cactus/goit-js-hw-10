{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.querySelector(\n  '#datetime-picker'\n);\nconst startBtn = document.querySelector('[data-start]');\nconst timerFields = document.querySelectorAll('.value');\n\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n\n    if (userSelectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const ms = userSelectedDate - new Date();\n    if (ms <= 0) {\n      clearInterval(timerInterval);\n      startBtn.disabled = false;\n      datetimePicker.disabled = false;\n      updateTimerDisplay({\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      });\n    } else {\n      const time = convertMs(ms);\n      updateTimerDisplay(time);\n    }\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor(\n    (((ms % day) % hour) % minute) / second\n  );\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerDisplay({\n  days,\n  hours,\n  minutes,\n  seconds,\n}) {\n  timerFields[0].textContent = addLeadingZero(days);\n  timerFields[1].textContent = addLeadingZero(hours);\n  timerFields[2].textContent = addLeadingZero(minutes);\n  timerFields[3].textContent = addLeadingZero(seconds);\n}\n"],"names":["datetimePicker","startBtn","timerFields","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","ms","updateTimerDisplay","time","convertMs","days","hours","minutes","seconds","addLeadingZero","value"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,cAC9B,kBACF,EACMC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAc,SAAS,iBAAiB,QAAQ,EAEtD,IAAIC,EAAmB,KACnBC,EAAgB,KAEpB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAE9BH,EAAmB,IAAI,MACzBI,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,UAClB,CAAO,EACDN,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACH,EAEAO,EAAUR,EAAgBK,CAAO,EAEjCJ,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBD,EAAe,SAAW,GAE1BI,EAAgB,YAAY,IAAM,CAChC,MAAMK,EAAKN,EAAmB,IAAI,KAClC,GAAIM,GAAM,EACR,cAAcL,CAAa,EAC3BH,EAAS,SAAW,GACpBD,EAAe,SAAW,GAC1BU,EAAmB,CACjB,KAAM,EACN,MAAO,EACP,QAAS,EACT,QAAS,CACjB,CAAO,MACI,CACL,MAAMC,EAAOC,EAAUH,CAAE,EACzBC,EAAmBC,CAAI,CACxB,CACF,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUH,EAAI,CAMrB,MAAMI,EAAO,KAAK,MAAMJ,EAAK,KAAG,EAC1BK,EAAQ,KAAK,MAAOL,EAAK,MAAO,IAAI,EACpCM,EAAU,KAAK,MAAQN,EAAK,MAAO,KAAQ,GAAM,EACjDO,EAAU,KAAK,MAChBP,EAAK,MAAO,KAAQ,IAAU,GACrC,EAEE,MAAO,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASR,EAAmB,CAC1B,KAAAG,EACA,MAAAC,EACA,QAAAC,EACA,QAAAC,CACF,EAAG,CACDd,EAAY,CAAC,EAAE,YAAce,EAAeJ,CAAI,EAChDX,EAAY,CAAC,EAAE,YAAce,EAAeH,CAAK,EACjDZ,EAAY,CAAC,EAAE,YAAce,EAAeF,CAAO,EACnDb,EAAY,CAAC,EAAE,YAAce,EAAeD,CAAO,CACrD"}